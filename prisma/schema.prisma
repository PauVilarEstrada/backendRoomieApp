generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                    String               @id @default(cuid())
  name                  String
  surname               String
  phone                 String
  email                 String               @unique
  birthDate             DateTime
  language              String
  passwordHash          String
  emailVerified         Boolean              @default(false)
  verificationCode      String?
  isAdmin               Boolean              @default(false)
  createdAt             DateTime             @default(now())
  prefix                String
  gender                String               @default("No quiero decirlo")
  profileType           String               @default("busco")
  verificationExpiresAt DateTime?
  ads                   Ad[]
  adminLogs             AdminLog[]
  messagesSent          ChatMessage[]
  matchesA              Match[]              @relation("MatchUserA")
  matchesB              Match[]              @relation("MatchUserB")
  roomProviderProfile   RoomProviderProfile?
  roommateProfile       RoommateProfile?
  swipesSent            Swipe[]              @relation("SwipeFromUser")
  swipesReceived        Swipe[]              @relation("SwipeToUser")
}

model Ad {
  id                  String               @id @default(cuid())
  type                String
  title               String
  description         String
  location            String
  price               Int
  expenses            Int
  availableFrom       DateTime
  minStay             Int
  maxStay             Int?
  allowsAnimals       Boolean
  genderPref          String
  features            String[]
  restrictions        String[]
  images              String[]
  video               String?
  gain                Float                @default(0)
  userId              String
  createdAt           DateTime             @default(now())
  latitude            Float?
  longitude           Float?
  clicks              Int                  @default(0)
  views               Int                  @default(0)
  user                User                 @relation(fields: [userId], references: [id])
  roomProviderProfile RoomProviderProfile?
  swipes              Swipe[]
}

model RoommateProfile {
  id            String   @id @default(cuid())
  userId        String   @unique
  description   String
  preferredArea String
  moveInDate    DateTime
  stayDuration  String
  genderPref    String
  allowsPets    Boolean
  profilePhotos String[]
  views         Int      @default(0)
  user          User     @relation(fields: [userId], references: [id])
}

model RoomProviderProfile {
  id            String   @id @default(cuid())
  userId        String   @unique
  spaceDesc     String
  rent          Int
  expenses      Int
  area          String
  availability  DateTime
  minStay       Int
  maxStay       Int?
  allowsPets    Boolean
  features      String[]
  restrictions  String[]
  genderPref    String
  roomPhotos    String[]
  profilePhotos String[]
  roomVideo     String?
  adId          String?  @unique
  views         Int      @default(0)
  ad            Ad?      @relation(fields: [adId], references: [id])
  user          User     @relation(fields: [userId], references: [id])
}

model AdBanner {
  id        String   @id @default(cuid())
  title     String
  imageUrl  String
  link      String?
  location  String
  views     Int      @default(0)
  clicks    Int      @default(0)
  createdAt DateTime @default(now())
  isActive  Boolean  @default(true)
}

model Swipe {
  id         String   @id @default(cuid())
  fromUserId String
  toUserId   String
  adId       String
  createdAt  DateTime @default(now())
  ad         Ad       @relation(fields: [adId], references: [id])
  fromUser   User     @relation("SwipeFromUser", fields: [fromUserId], references: [id])
  toUser     User     @relation("SwipeToUser", fields: [toUserId], references: [id])
}

model Match {
  id        String        @id @default(cuid())
  userAId   String
  userBId   String
  createdAt DateTime      @default(now())
  messages  ChatMessage[]
  userA     User          @relation("MatchUserA", fields: [userAId], references: [id])
  userB     User          @relation("MatchUserB", fields: [userBId], references: [id])
}

model ChatMessage {
  id       String   @id @default(cuid())
  matchId  String
  senderId String
  content  String
  sentAt   DateTime @default(now())
  read     Boolean  @default(false)
  imageUrl String?
  match    Match    @relation(fields: [matchId], references: [id])
  sender   User     @relation(fields: [senderId], references: [id])
}

model AdminLog {
  id        String   @id @default(cuid())
  adminId   String
  action    String
  targetId  String?
  timestamp DateTime @default(now())
  admin     User     @relation(fields: [adminId], references: [id])
}
